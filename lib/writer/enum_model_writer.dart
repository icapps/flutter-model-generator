import 'package:model_generator/model/item_type/double_type.dart';
import 'package:model_generator/model/item_type/string_type.dart';
import 'package:model_generator/model/model/enum_model.dart';
import 'package:model_generator/util/case_util.dart';
import 'package:model_generator/util/list_extensions.dart';
import 'package:model_generator/writer/object_model_writer.dart';

class EnumModelWriter {
  final EnumModel jsonModel;

  const EnumModelWriter(this.jsonModel);

  String write() {
    final sb = StringBuffer()
      ..writeln(ObjectModelWriter.autoGeneratedWarning)
      ..writeln()
      ..writeln("import 'package:json_annotation/json_annotation.dart';")
      ..writeln();

    final modelDescription = jsonModel.description?.trim();
    if (modelDescription != null && modelDescription.isNotEmpty) {
      sb.writeln("///$modelDescription");
    }

    final jsonModelName = CaseUtil(jsonModel.name);
    final properties = jsonModel.fields.first.enumProperties;

    sb.writeln('enum ${jsonModelName.pascalCase} {');
    for (var key in jsonModel.fields) {
      final keyProperty = key.enumProperties.firstWhereOrNull((element) => element.name.toLowerCase() == jsonModel.keyProperty);
      final jsonValue = keyProperty?.value ?? key.serializedName;
      final propertyType = keyProperty?.type;
      final isLast = jsonModel.fields.indexOf(key) == (jsonModel.fields.length - 1);

      if (propertyType is StringType || propertyType == null) {
        sb.writeln('  @JsonValue(\'$jsonValue\')');
      } else if (propertyType is DoubleType) {
        final doubleValue = double.tryParse(jsonValue);
        sb.writeln('  @JsonValue($doubleValue)');
      } else {
        sb.writeln('  @JsonValue($jsonValue)');
      }
      sb.write('  ${key.name}');
      if (key.enumProperties.isNotEmpty && isLast) {
        sb.writeln(';');
      } else {
        sb.writeln(',');
      }
    }

    if (properties.isNotEmpty) {
      sb.writeln();
    }

    for (var property in properties) {
      sb.writeln('final ${property.type} ${property.name};');
    }
    if (properties.isNotEmpty) {
      sb.write('Const ${jsonModel.name} ({');
      for (var property in properties) {
        sb.write('required this.${property.name}, ');
      }
      sb.writeln('})');
    }

    sb.writeln('}');

    return sb.toString();
  }
}
