import 'package:model_generator/model/item_type/string_type.dart';
import 'package:model_generator/model/model/enum_model.dart';
import 'package:model_generator/util/case_util.dart';
import 'package:model_generator/writer/object_model_writer.dart';

class EnumModelWriter {
  final EnumModel jsonModel;

  const EnumModelWriter(this.jsonModel);

  String write() {
    final sb = StringBuffer()
      ..writeln(ObjectModelWriter.autoGeneratedWarning)
      ..writeln()
      ..writeln("import 'package:json_annotation/json_annotation.dart';")
      ..writeln();

    final modelDescription = jsonModel.description?.trim();
    if (modelDescription != null && modelDescription.isNotEmpty) {
      sb.writeln("///$modelDescription");
    }

    sb.writeln('enum ${jsonModel.name} {');
    jsonModel.fields?.forEach((key) {
      final jsonValue = key.value == null || key.value?.isEmpty == null ? key.serializedName : key.value;
      final description = key.description;
      if (description != null) {
        sb.writeln('  ///$description');
      }
      if (jsonModel.itemType is StringType) {
        sb.writeln("  @JsonValue('$jsonValue')");
      } else {
        sb.writeln("  @JsonValue($jsonValue)");
      }
      sb.writeln('  ${key.name},');
    });
    sb.writeln('}');

    if (jsonModel.generateMap) {
      final jsonModelNameSnakeCase = CaseUtil(jsonModel.name).snakeCase;
      sb
        ..writeln()
        ..writeln('const ${jsonModelNameSnakeCase}Mapping = {');

      jsonModel.fields?.forEach((key) {
        final jsonValue = key.value == null || key.value?.isEmpty == null ? key.serializedName : key.value;
        sb.write('  ${jsonModel.name}.${key.name}: ');
        if (jsonModel.itemType is StringType) {
          sb.writeln('\'$jsonValue\',');
        } else {
          sb.writeln('$jsonValue,');
        }
      });

      sb
        ..writeln('};')
        ..writeln()
        ..writeln('const reverse${jsonModel.name}Mapping = {');

      jsonModel.fields?.forEach((key) {
        final jsonValue = key.value == null || key.value?.isEmpty == null ? key.serializedName : key.value;
        if (jsonModel.itemType is StringType) {
          sb.write('  \'$jsonValue\': ');
        } else {
          sb.write('  $jsonValue: ');
        }
        sb.writeln('${jsonModel.name}.${key.name},');
      });

      sb.writeln('};');

      if (jsonModel.generateExtensions) {
        sb
          ..writeln()
          ..writeln('extension ${jsonModel.name}Extension on ${jsonModel.name} {')
          ..writeln('  ${jsonModel.itemType.name} get ${jsonModel.itemType.name}Value => ${jsonModelNameSnakeCase}Mapping[this]!;')
          ..writeln('}')
          ..writeln()
          ..writeln('extension ${jsonModel.name}${jsonModel.itemType.name}Extension on ${jsonModel.itemType.name} {')
          ..writeln('  ${jsonModel.name}? get as${jsonModel.name} => reverse${jsonModel.name}Mapping[this];')
          ..writeln('}');
      }
    }

    return sb.toString();
  }
}
